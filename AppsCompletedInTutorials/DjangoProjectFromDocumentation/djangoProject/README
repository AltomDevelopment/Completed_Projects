# Explanation of Python Files

# Outer mysite/ root directory
    is a container for your project. Its name doesn’t matter to Django; you can rename it to anything you like.
    # manage.py: A command-line utility that lets you interact with this Django project in various ways.
        You can read all the details about manage.py in django-admin and manage.py.

# The inner mysite/ directory
    is the actual Python package for your project. Its name is the Python package name you’ll need to use to import anything inside it (e.g. mysite.urls).
    # mysite/__init__.py: An empty file that tells Python that this directory should be considered a Python package.
                            If you’re a Python beginner, read more about packages in the official Python docs.
    # mysite/settings.py: Settings/configuration for this Django project. Django settings will tell you all about how settings work.
    # mysite/urls.py: The URL declarations for this Django project; a “table of contents” of your Django-powered site.
                        You can read more about URLs in URL dispatcher.
    # mysite/asgi.py: An entry-point for ASGI-compatible web servers to serve your project. See How to deploy with ASGI for more details.
    # mysite/wsgi.py: An entry-point for WSGI-compatible web servers to serve your project. See How to deploy with WSGI for more details.

# Note for Django App
---
#The Development Server
python manage.py runserver
Lightweight webserver written purely in python, included so you can develop things rapidly
without dealing with an Apache development server (don't use in a production environment)
It's intended only for use while developing.

#Changing the Port
python manage.py runserver 8080
If you want to change the IP pass it along with the port

# Difference Between Projects and Apps
An app is a web application that does something and a project is a collection of
configuration and apps for a particular website.
A project can contain multiple apps. An app can be in multiple projects.


# Working with Paths
---
#path() argument: route
route is a string that contains a URL pattern. When processing a request,
Django starts at the first pattern in urlpatterns and makes its way down the list, comparing
the requested URL against each pattern until it finds one that matches.
Patterns don't search GET and POST parameters, or the domain name.

#path() argument: view
When Django finds a matching pattern, it calls the specified view function with an
HttpRequest object as the first argument and any "captured" values from the route
as keyword arguments.

#path() argument: kwargs
Arbitrary keyword arguments can be passed in a directory to the target view.

#path() argument: name
Naming your URL lets you refer to it unambiguously from elsewhere in Django,
especially from within templates. This powerful feature allows you to make global
changes to the URL patterns of your project while only touching a single file.

# Updating Changes to your Models
python manage.py makemigrations polls

# Running the migration and managing the database schema automatically
python manage.py sqlmigrate polls 0001

run migrate again to create those model tables

# Views
Each view is responsible for doing one of two things: returning an HttpResponse object containing the content for the requested page
or raising an exception such as Http404.


mysite/
    manage.py
    mysite/
        __init__.py
        settings.py
        urls.py
        asgi.py
        wsgi.py
    polls/
        __init__.py
        admin.py
        apps.py
        migrations/
            __init__.py
            0001_initial.py
        models.py
        static/
            polls/
                images/
                    background.gif
                style.css
        templates/
            polls/
                detail.html
                index.html
                results.html
        tests.py
        urls.py
        views.py
    templates/
        admin/
            base_site.html




